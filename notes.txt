let's have a think about this bug

it seems to be the more you browse, the more chance of this happening. I suspect that the image store is getting into a state where they are no available slots so it's the same effect as only having a few free slots..

Let's see if this looks like the case by reducing the image store size to 5

Ok this is confirmed. So the question is, why are we getting into a state where there are unavailable slots? Could this be caused by failed downloads?

So let's try counting the available slots.

BOOM, the bug happens when there are zero available slots.. So what state are these in? Let's try counting by state.

Ok the plot thickens, we get to a state where none are available, some are stuck in ready, some are stuck in loading, but combined, those numbers don't add up to 500. So what's going on?

let's count unknown state..
Ok none are in an unknown state.. So what state are they stuck in to be coming up as unavailable?

Is this something to do with the logic path? if we find the index. Are we duplicating items? let's check for duplicates

No duplicates.. So what's going on? Why do we have no available slots?
There's only one state we haven't checked and that's QUEUED
Let's check that..

Ok. So when the bug occurs we are in a state where the queue gets stuck at like 300+. It's almost as if there are more results being requested than we can process.. So is it because the last used tick is the same for every tile because we're using the same call to calculate the row geometry? Maybe we need a flag so that we only update the last used tick when we request for render.

Think i've cracked it
We have stuck download threads. So why are these threads getting stuck?
does this also explain the memory leak?

Ok this is a little weird. the default curl timeout is NEVER. So I updated that.. but it's almost as if DEAD ones are getting requeued. Which shouldn't occur. I've set the timeout but we're still getting either stuck in a queued state or we're still processing.. Are we still processing when it get's stuck?

AH HA! There's no lock! WE need a state after queued to indicate to the other load threads that it's not available to be picked up.. Don't we have this with loading?

Ok so it doesn't seem like they are stuck in downloading.. Maybe I should inintroduce a DOWNLOADING state just so I can see what's happening

Alright so one thing that's happening, is that the ones getting stuck in ready state aren't being loaded because they are being requested by the calculate row geometry call, but they are never being rendered. So how do we stop this from happening?

We can either make it so that READY is also available..
We can move the code for loading textures into the place where we fully scanthe imagesStore.. What's the downside to this?

Alright so that helped some things.. 

We're still getting this bug.
So now that we have nothing stuck in a loading state, why are we getting things stuck in a loading state?

Alright, so what if it do do with the error we get from stbi load. we're assuming if we can't load it, we need to download but that might not be the case.

That's not it, we only get can't fopen.

STUPID MOMENT 1!
Alright, so it turns out that they are stuck in DOWNLOADING, not loading.
This is good, it means we have something more concrete and explains why we
are having hung or zombie threads.

Ok I'm going to nuke my covers. To see if it works when we have stuff that actually needs downloading

Right so it looks like I made an assumption that downloading was actually working when it turns out it isn't at all.
Is this because the pointer is null?

It looks like we're never actually getting to the point where we set it back to queued. wrong, grep fail.

huh, if I put the print inside the lock, it doesn't work, if I put it outside it's fine.. I wonder if we are passing the lock by reference and it can't acquire it or something..

yup that was it, had to pass the pointer to the lock instead

alright so that seems a lot more stable.. We're still getting stuck with things in downloaded when using search.. not sure why..

